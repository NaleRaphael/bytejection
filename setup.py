#!/usr/bin/env python
from __future__ import absolute_import
import os
from setuptools import setup, find_packages

# semantic versioning
MAJOR, MINOR, MICRO = 0, 0, 0
VERSION = '{}.{}.{}'.format(MAJOR, MINOR, MICRO)
PACKAGE_NAME = 'bytejection'


def write_version_py(version_string, fn='./{}/version.py'.format(PACKAGE_NAME)):
    content = (
        '# This file is generated by setup.py\n'
        'version = \'{version}\'\n'
    )

    with open(fn, 'w') as f:
        f.write(content.format(version=version_string))


def get_requirements(fn):
    if not os.path.exists(fn):
        raise FileNotFoundError('Given file {} does not exists.'.format(fn))
    with open(fn, 'r') as f:
        reqs = [line.strip() for line in f.readlines()]
    return reqs


def setup_package():
    write_version_py(VERSION)

    # packages to be installed
    excluded = ('tests')
    packages = find_packages(exclude=excluded)

    requirements = []

    metadata = {
        'name': PACKAGE_NAME,
        'version': VERSION,
        'description': '',
        'url': '',
        'packages': packages,
        'install_requires': requirements,
    }
    setup(**metadata)


if __name__ == '__main__':
    setup_package()